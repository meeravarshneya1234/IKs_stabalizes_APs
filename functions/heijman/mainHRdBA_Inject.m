% *************************************************************************
% *   Copyright (C) 2011 by Jordi Heijman, Paul G. A. Volders,            *
% *   Ronald L. Westra and Yoram Rudy                                     *
% *   Email: jordi.heijman@maastrichtuniversity.nl  / rudy@wustl.edu      *
% *   Web:   http://rudylab.wustl.edu                                     *
% *                                                                       *
% *   MATLAB Implementation of the model described in the article:        *
% *   "Local control of beta-adrenergic stimulation: Effects on           *
% *   ventricular myocyte electrophysiology and Ca2+ transient"           *
% *                                                                       *
% *   Journal of Molecular and Cellular Cardiology. 2011.                 *
% *                                                                       *
% *   Usage:                                                              *
% *   Settings can be stored in a structure and passed to the main        *
% *   function. These settings include (among other things):              *
% *     - bcl                 (pacing cycle length in ms)                 *
% *     - freq                (number of APs to calculate)                *
% *     - storeLast           (the number of beats that will be stored)   *
% *     - Istim               (amplitude of stimulus current)             *
% *     - stimdur             (duration of stimulus in ms)                *
% *     - X_o                 (extracellular concentration of ion X in mM)*
% *     - IXB                 (fraction of block of current X, e.g. ICaLB)*
% *     - ISO                 (concentration of isoproterenol in 10^-6 M) *
% *                                                                       *
% *   Example:                                                            *
% *     settings.bcl = 1000; settings.freq = 50; settings.storeLast = 5;  *
% *     settings.ISO = 1.0;                                               *
% *     [currents, State, t] = mainHRdBA(settings);                       *
% *     plot(t, State(:,1));                                              *
% *                                                                       *
% *   The program will return a structure with all individual currents, a *
% *   complete overview of the state vector over time and a list of the   *
% *   evaluated time points.                                              *
% *                                                                       *
% *   This m-file depends on the following files:                         *
% *   funHRdBA.m, HRdBA_Currents.m                                        *
% *                                                                       *
% *   This program is free software; you can redistribute it and/or modify*
% *   it under the terms of the GNU General Public License as published by*
% *   the Free Software Foundation; either version 2 of the License, or   *
% *   (at your option) any later version.                                 *
% *                                                                       *
% *   This program is distributed in the hope that it will be useful,     *
% *   but WITHOUT ANY WARRANTY; without even the implied warranty of      *
% *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the       *
% *   GNU General Public License for more details.                        *
% *                                                                       *
% *   You should have received a copy of the GNU General Public License   *
% *   along with this program; if not, write to the                       *
% *   Free Software Foundation, Inc.,                                     *
% *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.           *
% *************************************************************************

function [currents,State,Ti,APDs,settings]=mainHRdBA_Inject(settings,flags,scaling)
    settings = setDefaultSettings(settings);
    settings.dataElectrophysiol = constants_Electrophysiol;
    settings.dataSignaling = constants_Signaling;
    
    if exist('scaling','var')
        c.ICaLB = 1;
        c.IKsB = 1;
        c.IKrB = 1;
        c.INaKB =1;
        c.INaCaB = 1;
        c.IKpB = 1;
        c.IK1B = 1;
        c.INabB = 1;
        c.ITo1B = 1;
        c.ITo2B = 1;
        c.INaB = 1;
        c.INaLB = 1;
        c.IClB = 1;
        c.IpCaB = 1;
        c.ICabB = 1;
        c.IrelB = 1;
        c.IupB = 1;
        c.IleakB = 1;
        F = fieldnames(c);
        for iF = 1:length(F)
            aF = F{iF};
            settings.(aF) = scaling(iF);
        end
    end 
    
    if isfield(settings, 'applyMBC')
        if settings.applyMBC == 1
            settings.dataSignaling.J_CAV_ECAV = 1000 * settings.dataSignaling.J_CAV_ECAV;
            settings.dataSignaling.J_CAV_CYT = 1000 * settings.dataSignaling.J_CAV_CYT;
            settings.dataSignaling.J_ECAV_CYT = 1000 * settings.dataSignaling.J_ECAV_CYT; 
        end
    end
    if isfield(settings, 'applyPTX')
        if settings.applyPTX == 1, settings.dataSignaling.Gi_tot = 0.005; end
    end
    
   

%     if isfield(settings, 'sparseJacobian') && ~isempty(settings.sparseJacobian)
%         opts = odeset('RelTol', 1e-6,'JPattern','on');
%     else
%         opts= odeset('RelTol',1e-6, 'NonNegative', [2,3,4,5,6,13,80]);
%     end
opts = odeset('RelTol',1e-3,'AbsTol',1e-6);
State = zeros(0,145); % 145 state variables in this model
Stm = zeros(1,0);
Ti = zeros(0,1);
APDs = zeros(0,1); % now only storeLast number of APDs is saved
currents = []; % will later become a structure
% State = []; % 145 state variables in this model
% Stm = [];
% Ti = [];
% APDs = []; % now only storeLast number of APDs is saved
% currents = []; % will later become a structure
x0 = getInitialVector(settings,flags);

    if settings.applyVoltageClamp == 0
        
        % Current clamp mode: Loop through APs
        % ===========================================
        %h4 = waitbar(0,' Matlab is calculating your data ...');
        for p=1:settings.freq
            %     State=[];Stm=[];Ti=[];
            %     currents = []; APDs = [];

            [t,X]=ode15s('funHRdBA_Inject',[0 settings.bcl],x0,opts,settings,flags);
            nRows = size(X); %calculate the number of rows for saving results
            
            %             if t(end) < 0.9 * settings.bcl
            %                 disp(['Unable to complete AP, cancelling...']);
            %                 break;
            %             end
            
            %waitbar(p/settings.freq,h4)
            x0=[X(end,1:end)];
            
            %             curAPD = determineAPD(t, X(:,1), settings.APDRepLevel);
            curAPD = determineAPD(t, X(:,1));
            
            % Record data
            if isnan(settings.storeLast) || p > settings.freq - settings.storeLast
                if isnan(settings.storeLast)
                    %Ti=[Ti; t+(settings.bcl*(p-1))];
                    Ti(end+1:end+length(t),1) = t+(settings.bcl*(p-1));
                else
                    %Ti=[Ti; t+(settings.bcl*(p-1-(settings.freq - settings.storeLast)))];
                    Ti(end+1:end+length(t),1) = t+(settings.bcl*(p-1-(settings.freq - settings.storeLast)));
                end
                %State=[State; X];
                State(end+1:end+nRows,:) = X;
                St=settings.Istim*ones(1,length(t));
                St((find(t>settings.stimdur)))=0;
                %Stm=[Stm  St];
                Stm(1,end+1:end+length(St)) = St;
                 %APDs = [APDs; curAPD];
                APDs(end+1,1)=curAPD;
            end
            
            if settings.showProgress == 1
                disp(['Calculated AP ', num2str(p), ' / ', num2str(settings.freq), '... APD = ', num2str(curAPD)]);
            end
        end
        %close(h4)
    else
        % Voltage clamp mode
        % ===========================================
        if isfield(settings, 'voltageClampFile') && ~isempty(settings.voltageClampFile)
            settings.vcpFileData = dlmread(settings.voltageClampFile);            
        end
        
        if isfield(settings, 'vcpFileData') && ~isempty(settings.vcpFileData)
            settings.vcp = [0, settings.vcpFileData(end,1)];
        end
        
        prevt = 0;
        for p=1:size(settings.vcp,1)
            dur = settings.vcp(p,2) - prevt;        
            settings.Vhold = settings.vcp(p,1);
            
            if isfield(settings, 'applyJSRClamp') && p == settings.clampIndex
                x0(5) = settings.clampValue;
            end
        
            [t,X]=ode15s('funHRdBA',[0 dur],x0,opts,settings);

            if t(end) < 0.9 * dur
                disp(['Unable to complete VC, cancelling...']);
                break;
            end
            
            x0=[X(end,1:end)];
            Ti=[Ti; t(1:end-1)+(prevt)];
            State=[State; X(1:end-1, :)];
            prevt = prevt + dur;
        end
        Stm = zeros(length(Ti),1)';
    end
	currents = HRdBA_Currents(State,Ti,Stm,settings);     
end

% Sub-function to determine APD (between max dvdt and a given percentage of
% maximum and minimum membrane potential
function APD = determineAPD(time, Voltage)
%     dvdt = (Vm(2:end) - Vm(1:end-1)) ./ (t(2:end) - t(1:end-1));
%     [v, maxdvin] = max(dvdt);
%
% 	baselinelvl = min(Vm);
% 	[peak, peakin] = max(Vm);
%
% 	Voi = baselinelvl + (1 - replevel) * (peak - baselinelvl);
%     tin = find(Vm(peakin:end) < Voi);
%     if ~isempty(tin)
%         tin = tin(1);
%         APD = t(tin+peakin-1)-t(maxdvin);
%     else
%         APD = NaN;
%     end
% Derivative of V
dVdt = diff(Voltage)./diff(time) ;
[~,dexmax] = max(dVdt) ;

%t of maximum dV/dt, consider this beginning of action potential
tinit = time(dexmax) ;

% Then determine peak V of action potential, for two reasons,
% 1) Because repolarization must, by definition, occur after this
% 2) To compute 50%, 90%, etc., must have this value
[~,peakdex] = max(Voltage) ;
tpeak = time(peakdex) ;
repoldex = find(time > tpeak & Voltage < -75,1) ; % APD based on repolarization back to -75 mV instead of -60 mV
if isempty(repoldex)
    APD = NaN;
else
    repoltime = time(repoldex(1)) ;
    APD = roundx((repoltime - tinit),1) ;
end

end

function Xinit = getInitialVector(settings,flags)
    if flags.SS == 1
        if sum(settings.bcl == [1000]) > 0 && sum(settings.ISO == [0,1]) > 0 
            load('ICs_SS_Heijman_updated.mat')
            %str =['PCL_' num2str(settings.bcl)];
            model = ['Heijman_ISO_' num2str(settings.ISO)];
            Xinit = ICs.(model);
        else
            disp(['Initial conditions for steady state PCL = ' num2str(settings.bcl) ' & ISO = ' num2str(settings.ISO) ' do not exist. Using the non-steady state inital conditions.'])
            X0_Electro = [-8.7491E01, 1.3394E-02, 2.3413E-02, 2.3413E-02, 6.8659E+00, 1.1910E+00, 1.7546E-03, 6.8909E+00, 6.8909E+00, 1.4562E+02, 2.0273E+01, 2.0273E+01, 3.6675E-09, 6.8172E-03, 9.0163E-01, 9.9709E-01, 7.0530E-04, 3.6003E-01, 1.7687E-05, 9.9798E-01, 9.8747E-01, 1.2306E-08, 9.9604E-01, ...
                1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 9.1141E-01, 8.4395E-02, 2.9306E-03, 4.52285E-05, 2.6175E-07, 1.1424E-03, 7.9337E-05, 1.8366E-06, 1.4172E-08, 5.3696E-07, 2.4861E-08, 2.8776E-10, 1.1217E-10, 2.5967E-12, 8.7874E-15, 9.3722E-16, 1.6595E-17, 1.000, ...
                0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 9.5624E-01, 4.2127E-02, 6.9597E-04, 5.1101E-06, 1.4070E-08, 9.0269E-04, 2.9826E-05, 3.2850E-07, 1.2060E-09, 3.1956E-07, 7.0390E-09, 3.8763E-11, 5.0277E-11, 5.5374E-13, 2.9664E-15, 1.1201E-15, 1.6613E-18, 1.2360E-3, 7.9472E-01, ...
                9.9123E-01, 6.8127E-04, 8.3805E-01, 9.9281E-01, 7.3074E-09, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]';
            
            X0_Signaling = zeros(57,1);
            X0_Signaling = [0.00685041638458665,0.0184627603007976,0.000731420577213056,0.00745773247314215,0.0191017987408719,0.00115141243826747,0.000607316088556676,0.000639038440072507,0.000419991861054322,0.347102959606005,9.62359241535767,0.474081735738211,0.0149041813757831,0.203016833596288,0.00944463350378086,2.49592854373432e-10,1.18055788874765e-09,7.07824478944671e-11,0.0904820284659604,0.00276490711096605,0.225475702283053,0.0326565916584703,0.192819110624505,0.205444874210056,0.174057375932567,0.817161796756964,0.567249910261073,0.249911886495890,0.0646928309115710,0.0664997605558791,0.489063888619456,0.362113356111496,0.126950532507959,0.0236821659448037,0.0128402905095188,0.00637363047239019,4.29171113639322e-05,0.00917039986149184,0.0282662056977524,0.000673713947839317,0.000765988420110534,0.592167467082831,0.673518785672382,0.239479458960528,0.126345311579566,0.00410693810508171,0.0589379755147718,0.0275455839709412,8.91799633266019e-10,0.00159632196638178,0.00209911481235842,0.000502792845976641,0.0110248953370551,1.13428924662652e-10,0.000364315164237569,0.000705656306851923,0.000341341142614041]';
            Xinit = [X0_Electro; X0_Signaling];
        end
        
%         if settings.ISO == 0
%             Xinit = [-87.5623957664428,0.0136192719458306,0.0186587636687042,0.0186592180454889,7.72218643209987,1.41924631254667,0.0112033149524696,7.39108309637301,7.39110155933464,145.515074466008,20.7192846277868,20.7192847896881,3.46603366606287e-09,0.959875582966894,0.000671984528122110,0.997131110843645,0.00100692650040353,0.321413982192045,1.75109515437573e-05,0.995329597641979,0.803279477956307,3.13516436584177e-06,0.996074616327862,0.998731809768220,8.28035398570101e-11,0.00126202583023252,1.04627090631309e-13,4.65716327219429e-07,3.61250656877687e-17,5.70441181415235e-06,4.41916601665484e-16,0.891193408001274,0.102760396778741,0.00444434586777096,8.54536846868731e-05,6.16162705383098e-07,0.00139589496162272,0.000120742130569393,3.48123464859938e-06,3.32906856457768e-08,8.20012642677547e-07,4.72296619013267e-08,6.64748327621176e-10,2.12932278630046e-10,5.75957706448661e-12,1.51610246400232e-13,2.89096363179026e-12,-6.52221731222832e-13,0.999944165998188,6.57012536880743e-11,4.65949615288203e-05,3.06094984277763e-15,2.49938203011918e-06,1.51748858845157e-16,6.30759695167917e-06,3.82686273890238e-16,0.811683074921745,0.170054781893383,0.0134245183344607,0.000481430587648996,7.61240493316492e-06,0.00372243866900916,0.000587729605868027,3.16199503016237e-05,6.90496541970721e-07,6.43246352832144e-06,6.92408799803974e-07,3.54000276775934e-08,5.13662316375196e-09,8.85375527982343e-09,6.11756292300959e-09,1.88997424328830e-07,2.93589503807318e-10,0.887653197197477,0.00121947275268356,0.991382968526412,0.000671984528128550,0.919830796956651,0.994192341063838,6.80818739614625e-09,0.997907093068056,0.989438201082690,0.0745286506781735,0.00720223430493254,0.0745286506781735,0.0745286506781736,0.0745286506781738,0.0738087159167649,0.00685319836388190,0.0184629409387760,0.000731424648189158,0.00746053301478538,0.0191019795812294,0.00115141713349484,0.000607334650904722,0.000639038642451889,0.000419992485305528,0.344207407252665,9.62257470711422,0.474027186807444,0.0148720543172620,0.203016285327635,0.00944461077571695,2.10135699006369e-10,9.93928122630835e-10,5.95927283376148e-11,0.0898770767598579,0.00272351046387440,0.225034343619313,0.0322307398011237,0.192803603818099,0.205457767935620,0.174049891812825,0.817147398482774,0.567235514222399,0.249911884260414,0.0646982910475072,0.0664977209292044,0.489057506382769,0.362106975109463,0.126950531273055,0.0233908273583326,0.0128401565027535,0.00629522191394837,4.29165889070327e-05,0.00917030415527564,0.0153040545545458,0.000663982824095599,0.000765835653924289,0.687361837456933,0.673476890273980,0.237697260590433,0.124879479682179,0.00404818765619680,0.0589093247981627,0.0274862075813759,7.50818527158615e-10,0.00159288871674719,0.00209547225641223,0.000502583539665088,0.0110248655709182,9.54973908662680e-11,0.000364314184269606,0.000705655027945936,0.000341340843675995];
%         elseif settings.ISO == 1
%             Xinit = [-87.5185776680266,0.0115849516934257,0.0551266173197179,0.0551272731897981,8.97529361574969,2.32356150607194,0.0825705937986814,6.82569214826885,6.82581574861308,146.227185135640,21.0042139894514,21.0042141917792,6.14402015705874e-09,0.959492195880808,0.000676784133907507,0.997104773877568,0.00101436653886073,0.328171206144387,1.76188470581179e-05,0.995307279332103,0.812312642897112,4.87350046532266e-06,0.996055467031504,0.886712924419890,7.45079298337051e-11,0.113285798053390,9.51908537108178e-12,2.16141021080828e-08,1.82586031958529e-18,1.38776568524427e-06,1.17273841067585e-16,0.887225915339996,0.106320167532933,0.00477772335535499,9.54070483238944e-05,7.14385644540639e-07,0.00145009896530250,0.000130326583195712,3.90380480725022e-06,3.89904033699282e-08,8.88761367813042e-07,5.32449102066024e-08,7.99745620242029e-10,2.42091804361910e-10,8.34378629650518e-12,7.95641496152251e-13,1.50613613761844e-11,3.51719516314359e-12,0.995282425148467,6.63534952327116e-11,0.00471644729827626,3.14436339709739e-13,1.18803140841716e-07,7.96366569395517e-18,1.54988285737335e-06,1.03966772988385e-16,0.777535795749039,0.197310242776216,0.0190343592401060,0.000857588806821316,1.93917352784997e-05,0.00433709402232173,0.000836857504177855,5.65890188217740e-05,1.82102913117480e-06,9.19829044584344e-06,1.24726158760333e-06,1.20153601672456e-07,9.60186628275996e-09,4.06888555326705e-08,2.85245297786070e-08,8.81050086216761e-07,1.41605545201912e-09,0.886662750014051,0.00122805856935799,0.991287863461960,0.000676784133907402,0.919097733696078,0.994132950747513,9.69876940844050e-09,0.997896894976886,0.989493743467054,0.276709140204387,0.131086583146629,0.276709140204387,0.276709140204387,0.276709140204387,0.279257468269107,0.203944383030607,0.276439552506256,0.0171620926803607,0.204603410470013,0.277099135770222,0.0177995711358295,0.000659027439354658,0.000659583263980695,0.000637478455475398,3.22686266669473,24.2538831942794,2.19199504124303,0.0331788478489632,0.203540557178778,0.00946338684840871,0.00779599401436763,0.0100009976591918,0.000707840459481490,0.220303244169053,0.0625837840682267,0.516543315126599,0.322663488290314,0.193879826929455,0.105332901343555,0.224908170981252,0.908908553187845,0.658984404490614,0.249924148697182,0.0172485576136009,0.0819792629057166,0.535019293120982,0.408060869345569,0.126958423775398,0.154963788724191,0.0137615570584770,0.0417057260822994,4.59847981762107e-05,0.00982835870025032,0.0512111055037327,0.0212842427177758,0.0167902769952626,0.994010086498928,0.998807746114497,0.948303838625373,0.997499105057853,0.109902696047498,0.391099191139688,0.0613882310935058,0.0142069727730746,0.275274520027794,0.275934096658064,0.000659576630886914,0.0110456429756759,0.000568457676468595,0.0432609946337366,0.0439123447460229,0.000651350112329389];
%         else
%             disp('SS initial condition vector not present for this ISO Concentration.')
%         end
    else
        X0_Electro = [-8.7491E01, 1.3394E-02, 2.3413E-02, 2.3413E-02, 6.8659E+00, 1.1910E+00, 1.7546E-03, 6.8909E+00, 6.8909E+00, 1.4562E+02, 2.0273E+01, 2.0273E+01, 3.6675E-09, 6.8172E-03, 9.0163E-01, 9.9709E-01, 7.0530E-04, 3.6003E-01, 1.7687E-05, 9.9798E-01, 9.8747E-01, 1.2306E-08, 9.9604E-01, ...
            1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 9.1141E-01, 8.4395E-02, 2.9306E-03, 4.52285E-05, 2.6175E-07, 1.1424E-03, 7.9337E-05, 1.8366E-06, 1.4172E-08, 5.3696E-07, 2.4861E-08, 2.8776E-10, 1.1217E-10, 2.5967E-12, 8.7874E-15, 9.3722E-16, 1.6595E-17, 1.000, ...
            0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 9.5624E-01, 4.2127E-02, 6.9597E-04, 5.1101E-06, 1.4070E-08, 9.0269E-04, 2.9826E-05, 3.2850E-07, 1.2060E-09, 3.1956E-07, 7.0390E-09, 3.8763E-11, 5.0277E-11, 5.5374E-13, 2.9664E-15, 1.1201E-15, 1.6613E-18, 1.2360E-3, 7.9472E-01, ...
            9.9123E-01, 6.8127E-04, 8.3805E-01, 9.9281E-01, 7.3074E-09, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]';
        
        X0_Signaling = zeros(57,1);
        X0_Signaling = [0.00685041638458665,0.0184627603007976,0.000731420577213056,0.00745773247314215,0.0191017987408719,0.00115141243826747,0.000607316088556676,0.000639038440072507,0.000419991861054322,0.347102959606005,9.62359241535767,0.474081735738211,0.0149041813757831,0.203016833596288,0.00944463350378086,2.49592854373432e-10,1.18055788874765e-09,7.07824478944671e-11,0.0904820284659604,0.00276490711096605,0.225475702283053,0.0326565916584703,0.192819110624505,0.205444874210056,0.174057375932567,0.817161796756964,0.567249910261073,0.249911886495890,0.0646928309115710,0.0664997605558791,0.489063888619456,0.362113356111496,0.126950532507959,0.0236821659448037,0.0128402905095188,0.00637363047239019,4.29171113639322e-05,0.00917039986149184,0.0282662056977524,0.000673713947839317,0.000765988420110534,0.592167467082831,0.673518785672382,0.239479458960528,0.126345311579566,0.00410693810508171,0.0589379755147718,0.0275455839709412,8.91799633266019e-10,0.00159632196638178,0.00209911481235842,0.000502792845976641,0.0110248953370551,1.13428924662652e-10,0.000364315164237569,0.000705656306851923,0.000341341142614041]';
        Xinit = [X0_Electro; X0_Signaling];
    end
    
%     if sum(flags.pka)>0
%         Xinit_noISO = [-87.5623957664428,0.0136192719458306,0.0186587636687042,0.0186592180454889,7.72218643209987,1.41924631254667,0.0112033149524696,7.39108309637301,7.39110155933464,145.515074466008,20.7192846277868,20.7192847896881,3.46603366606287e-09,0.959875582966894,0.000671984528122110,0.997131110843645,0.00100692650040353,0.321413982192045,1.75109515437573e-05,0.995329597641979,0.803279477956307,3.13516436584177e-06,0.996074616327862,0.998731809768220,8.28035398570101e-11,0.00126202583023252,1.04627090631309e-13,4.65716327219429e-07,3.61250656877687e-17,5.70441181415235e-06,4.41916601665484e-16,0.891193408001274,0.102760396778741,0.00444434586777096,8.54536846868731e-05,6.16162705383098e-07,0.00139589496162272,0.000120742130569393,3.48123464859938e-06,3.32906856457768e-08,8.20012642677547e-07,4.72296619013267e-08,6.64748327621176e-10,2.12932278630046e-10,5.75957706448661e-12,1.51610246400232e-13,2.89096363179026e-12,-6.52221731222832e-13,0.999944165998188,6.57012536880743e-11,4.65949615288203e-05,3.06094984277763e-15,2.49938203011918e-06,1.51748858845157e-16,6.30759695167917e-06,3.82686273890238e-16,0.811683074921745,0.170054781893383,0.0134245183344607,0.000481430587648996,7.61240493316492e-06,0.00372243866900916,0.000587729605868027,3.16199503016237e-05,6.90496541970721e-07,6.43246352832144e-06,6.92408799803974e-07,3.54000276775934e-08,5.13662316375196e-09,8.85375527982343e-09,6.11756292300959e-09,1.88997424328830e-07,2.93589503807318e-10,0.887653197197477,0.00121947275268356,0.991382968526412,0.000671984528128550,0.919830796956651,0.994192341063838,6.80818739614625e-09,0.997907093068056,0.989438201082690,0.0745286506781735,0.00720223430493254,0.0745286506781735,0.0745286506781736,0.0745286506781738,0.0738087159167649,0.00685319836388190,0.0184629409387760,0.000731424648189158,0.00746053301478538,0.0191019795812294,0.00115141713349484,0.000607334650904722,0.000639038642451889,0.000419992485305528,0.344207407252665,9.62257470711422,0.474027186807444,0.0148720543172620,0.203016285327635,0.00944461077571695,2.10135699006369e-10,9.93928122630835e-10,5.95927283376148e-11,0.0898770767598579,0.00272351046387440,0.225034343619313,0.0322307398011237,0.192803603818099,0.205457767935620,0.174049891812825,0.817147398482774,0.567235514222399,0.249911884260414,0.0646982910475072,0.0664977209292044,0.489057506382769,0.362106975109463,0.126950531273055,0.0233908273583326,0.0128401565027535,0.00629522191394837,4.29165889070327e-05,0.00917030415527564,0.0153040545545458,0.000663982824095599,0.000765835653924289,0.687361837456933,0.673476890273980,0.237697260590433,0.124879479682179,0.00404818765619680,0.0589093247981627,0.0274862075813759,7.50818527158615e-10,0.00159288871674719,0.00209547225641223,0.000502583539665088,0.0110248655709182,9.54973908662680e-11,0.000364314184269606,0.000705655027945936,0.000341340843675995];
%         xinds = (128:135).*flags.pka;
%         xinds(xinds==0) = [];
%         Xinit(xinds) = Xinit_noISO(xinds);       
%     end 
    
    if isfield(settings, 'X0')
        Xinit = settings.X0; 
    end
end